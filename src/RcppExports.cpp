// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// is_canonical_mac
LogicalVector is_canonical_mac(std::vector < std::string > mac);
RcppExport SEXP _MACtools_is_canonical_mac(SEXP macSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector < std::string > >::type mac(macSEXP);
    rcpp_result_gen = Rcpp::wrap(is_canonical_mac(mac));
    return rcpp_result_gen;
END_RCPP
}
// as_raw_mac
List as_raw_mac(std::vector < std::string > mac);
RcppExport SEXP _MACtools_as_raw_mac(SEXP macSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector < std::string > >::type mac(macSEXP);
    rcpp_result_gen = Rcpp::wrap(as_raw_mac(mac));
    return rcpp_result_gen;
END_RCPP
}
// canonicalize_mac
CharacterVector canonicalize_mac(std::vector < std::string > mac);
RcppExport SEXP _MACtools_canonicalize_mac(SEXP macSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector < std::string > >::type mac(macSEXP);
    rcpp_result_gen = Rcpp::wrap(canonicalize_mac(mac));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MACtools_is_canonical_mac", (DL_FUNC) &_MACtools_is_canonical_mac, 1},
    {"_MACtools_as_raw_mac", (DL_FUNC) &_MACtools_as_raw_mac, 1},
    {"_MACtools_canonicalize_mac", (DL_FUNC) &_MACtools_canonicalize_mac, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_MACtools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
